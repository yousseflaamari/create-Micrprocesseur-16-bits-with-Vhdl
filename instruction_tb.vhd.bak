

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity instruction_tb is
END instruction_tb;

architecture behavior of instruction_tb is

COMPONENT instruction
	port(
		instr_addr : in STD_LOGIC_VECTOR (4 downto 0);
		instruction : out STD_LOGIC_VECTOR(13 downto 0)
	);
END COMPONENT;

--Inputs
SIGNAL instr_addr_tb : STD_LOGIC_VECTOR(4 downto 0);

--Outputs
SIGNAL instruction_tb : STD_LOGIC_VECTOR(13 downto 0);

--clock period definition
CONSTANT clk_period : time := 10 ns;

BEGIN

--Instatntiate the unit under test (UUT)

uut : instruction
	port map(
		instr_addr => instr_addr_tb,
		instruction => instruction_tb
	);


type instruction_set is array(0 to 20) of STD_LOGIC_VECTOR(13 downto 0);
	constant instr : instruction_set :=(
		"00001000001000", -- plus
		"00011000000000", -- mult
		"00010000001000", -- moins
		"00000000000000", -- and
		"00100000010000", -- div
		"00101000010000", -- sll by 2
		"00110000010000", -- slr by 2
		"00111000011000", -- rol by 7
		"01000000011000", -- ror by 7
		"01001000011000", -- or of 4 and 7
		"01010000010000", -- xor of 7 and 4
		"01100000010000", -- nor ...101 and ...010 sur 8 bit
		"01101000100000", --nand entre F8 et F0 => 0F
		"01110000101000", -- xnor 0F et EA => 1A
		"11111000000000", -- reset
		"11111000000000",
		"11111011000011", -- value 3
		"11111110000011", -- value 2
		"11111000000000",
		"10000000111000", --NEW value 7 to the 000 address
		"11111000000000"  -- LOAD the new value just to make sure
	
	);

 -- Stimulus process
  stimulus_proc: process
  begin
    instr_addr_tb <= "00000"; -- Initialize instr_addr_tb to 0

    -- Increment instr_addr_tb by 1 in each iteration
    for i in 0 to 19 loop
      wait for 10 ns;
      instr_addr_tb <= std_logic_vector(unsigned(instr_addr_tb) + 1);
    end loop;

    wait;
  end process stimulus_proc;
END;